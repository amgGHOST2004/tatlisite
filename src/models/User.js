const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const User = require('../models/User'); // KullanÄ±cÄ± modelini iÃ§e aktar
const Product = require('../models/Product'); // ÃœrÃ¼n modelini iÃ§e aktar
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

// Define the User schema
const userSchema = new mongoose.Schema({
  username: String,
  email: String,
  password: String,
});

// Hash password before saving
userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) return next();
  try {
    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt);
    next();
  } catch (error) {
    next(error);
  }
});

// âœ… KullanÄ±cÄ± kaydÄ± (Register)
userSchema.statics.registerUser = async function (username, email, password) {
  const existingUser = await this.findOne({ email });
  if (existingUser) {
    throw new Error('Bu e-posta zaten kullanÄ±lÄ±yor');
  }
  const hashedPassword = await bcrypt.hash(password, 10);
  const newUser = new this({ username, email, password: hashedPassword });
  return newUser.save();
};

// âœ… KullanÄ±cÄ± giriÅŸi (Login)
userSchema.statics.loginUser = async function (email, password) {
  const user = await this.findOne({ email });
  if (!user) {
    throw new Error('GeÃ§ersiz e-posta veya ÅŸifre');
  }
  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) {
    throw new Error('GeÃ§ersiz e-posta veya ÅŸifre');
  }
  return jwt.sign({ userId: user._id }, 'secretKey', { expiresIn: '1h' });
};

// Remove this line as it's redundant
// const User = mongoose.model('User', userSchema, 'users');

// âœ… TÃ¼m kullanÄ±cÄ±larÄ± getir
router.get('/', async (req, res) => {
  try {
    const users = await User.find({});
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: 'KullanÄ±cÄ±larÄ± alÄ±rken hata oluÅŸtu', error });
  }
});

// âœ… KullanÄ±cÄ± gÃ¼ncelleme (isim ve e-posta deÄŸiÅŸtir)
router.put('/:id', async (req, res) => {
  try {
    const { username, email } = req.body;
    const updatedUser = await User.findByIdAndUpdate(
      req.params.id,
      { username, email },
      { new: true }
    );
    res.json(updatedUser);
  } catch (error) {
    res.status(500).json({ message: 'KullanÄ±cÄ± gÃ¼ncellenirken hata oluÅŸtu.', error });
  }
});

// âœ… KullanÄ±cÄ± silme
router.delete('/:id', async (req, res) => {
  try {
    await User.findByIdAndDelete(req.params.id);
    res.json({ message: 'KullanÄ±cÄ± baÅŸarÄ±yla silindi' });
  } catch (error) {
    res.status(500).json({ message: 'KullanÄ±cÄ± silinirken hata oluÅŸtu.', error });
  }
});

// ğŸ“Œ Multer ile resim yÃ¼kleme ayarlarÄ±
const storage = multer.diskStorage({
  destination: './uploads/', // Resimler "uploads" klasÃ¶rÃ¼ne kaydedilecek
  filename: (req, file, cb) => {
    cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname));
  }
});
const upload = multer({ storage: storage });

// âœ… ÃœrÃ¼n ekleme (Ad, fiyat, stok, resim)
router.post('/products', upload.single('image'), async (req, res) => {
  try {
    const { name, stock, price } = req.body;
    const imageUrl = req.file ? `/uploads/${req.file.filename}` : ''; // Resim yolu
    const newProduct = new Product({ name, stock, price, image: imageUrl });
    await newProduct.save();
    res.status(201).json({ message: 'ÃœrÃ¼n baÅŸarÄ±yla eklendi!', product: newProduct });
  } catch (error) {
    res.status(500).json({ message: 'ÃœrÃ¼n eklenirken hata oluÅŸtu.', error: error.message });
  }
});

// âœ… TÃ¼m Ã¼rÃ¼nleri getir
router.get('/products', async (req, res) => {
  try {
    const products = await Product.find({});
    res.json(products);
  } catch (error) {
    res.status(500).json({ message: 'ÃœrÃ¼nler alÄ±nÄ±rken hata oluÅŸtu.', error });
  }
});

module.exports = router;